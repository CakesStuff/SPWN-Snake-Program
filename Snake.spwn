extract obj_props
gs=import gamescene
width=4
height=3
$.add(obj{
  OBJ_ID:8,
  X:15+30*100,
  Y:15+30*4,
  GROUPS:42g
})
kill=!{
  42g.move(0,-4)
}
max=counter(90i)
sel=counter(91i)
sel=0
for i in ..height{
  for n in ..width{
    $.add(obj{
	  OBJ_ID:211,
      X:15+n*30,
      Y:15+i*30,
      COLOR:@color(i*width+n+1),
	  GROUPS:420g
    })
  }
}
->420g.lock_to_player(lock_x = true, lock_y = false)
impl @counter {
  my_func: (self,id){
    self.myid=id
    let self.left=id-1
    if self.left<0{
      self.left+=width
    }
    self.left=@item(self.left)
    let self.up=id-width
    if self.up<0{
      self.up+=(width*height)
    }
    self.up=@item(self.up)
    let self.right=id+1
    if self.right>(width*height){
      self.right-=width
    }
    self.right=@item(self.right)
    let self.down=id+width
    if self.down>(width*height){
      self.down-=(width*height)
    }
    self.down=@item(self.down)
  },
  updateb: (self,dire){
    if dire==0{
      dire+=max+1
      return 0
    } else if dire==(width*height+1){
      dire+=max-(width*height)
      return 1
    } else {
      ->kill!
      return 0
    }
  },
  updatem: (self){
    temp=counter(switch sel {
        case 1: self.up,
        case 2: self.right,
        case 3: self.down,
        else: self.left,
      })
    return self.updateb(temp)
  },
  draw: (self){
    if self==0{
      @color(self.myid+1).set(0,0,0)
    }else if self==82{
      @color(self.myid+1).set(255,0,0)
    } else {
      @color(self.myid+1).set(0,255,255)
    }
  }
}
let counters=[]
for i in ..(width*height){
  let c = counter(@item(i))
  c.my_func(i)
  on(c.reaches(-1),!{c+=1})
  on(c.reaches(width*height),!{c+=1})
  counters.push(c)
}
counters[7]+=1
counters[11]+=82
gs.button_a().on_triggered(!{sel-=1})
gs.button_b().on_triggered(!{sel+=1})
let dec=counter(0)
max+=1
wait(1)
while_loop(() => true,(){
  for i in ..(width*height){
    if counters[i]==max{
      dec+=counters[i].updatem()
    }
  }
  if dec==1{max+=1} else {
    for i in ..(width*height){
      ->counters[i]-=1
    }
  }
  for i in ..(width*height){
    ->counters[i].draw()
  }
  wait(0.5)
})
